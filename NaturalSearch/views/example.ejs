<!DOCTYPE html>
<meta charset="utf-8">

<head>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
    crossorigin="anonymous">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css" integrity="sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU"
    crossorigin="anonymous">
  <script src="https://d3js.org/d3.v4.min.js"></script>
</head>

<style>
  .links line {
    stroke: #ffffff;
    opacity: 2;
  }

  .nodes circle {
    stroke: #21eb1f;
    stroke-width: 1.5px;
    width: 100%;
  }

  body {
    background-color: black;
  }

  .navbar {
    margin-bottom: 10;
    background: url('http://thecodeplayer.com/u/m/b1.png');
    z-index: 9999;
    border: 100px;
    font-size: 14px !important;
    line-height: 1.42857143 !important;
    letter-spacing: 4px;
    border-radius: 4px;
    text-transform: uppercase;
  }

  .button-search {
    border-radius: 15px;

  }
  body, html{     height: 100%;     width: 100%;    }
</style>

<body>

  <!--div class="container-fluid">
      <div class="row py-4 navbar">
          <div class="col"></div>
          <div class="col col-lg-8">
              <div class="input-group mb-3">
                  <div class="input-group-prepend">
                          <button type="button" class="btn btn-primary">Pesquisar</button>
                  </div>
                  <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default">
              </div>
              <div class="form-check-inline">
                  <label class="form-check-label text-white">
                      <input type="checkbox" class="form-check-input" value="">Projetos
                  </label>
              </div>
              <div class="form-check-inline">
                  <label class="form-check-label text-white">
                      <input type="checkbox" class="form-check-input" value="">Propostas
                  </label>
              </div>
          </div>
          <div class="col"></div>
      </div-->

  <script>
      var width=800;
      var height=100;
      var color = d3.scaleOrdinal(d3.schemeCategory10);
    // posicionamento
    var svg = d3.select("body")
      .append("svg")
      .attr("width", width)
      .attr("height", height)
      .call(d3.zoom().on("zoom", function () {
        svg.attr("transform", d3.event.transform)
      }))
      .append("g")

    // setar distance de forma diferente
    var simulation = d3.forceSimulation()
      .force("link", d3.forceLink().id(function (d) { return d.id; }).distance(100).strength(1))
      .force("charge", d3.forceManyBody())
      .force("center", d3.forceCenter(width / 2, height / 2));

    d3.json("../static/javascripts/d3_prop_proj.json", function (error, graph) {
      if (error) throw error;

      var link = svg.append("g")
        .attr("class", "links")
        .selectAll("line")
        .data(graph.links)
        .enter().append("line")
        .attr("stroke-width", function (d) { return Math.sqrt(d.value) });


      var node = svg.append("g")
        .attr("class", "nodes")
        .selectAll("circle")
        .data(graph.nodes)
        .enter().append("circle")
        .attr("r", 15)
        .attr("fill", function (d) { return color(d.group); })
        .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

      node.append("title")
        .text(function (d) { return d.title || d.name; });

      simulation
        .nodes(graph.nodes)
        .on("tick", ticked);

      simulation.force("link")
        .links(graph.links);

      function ticked() {
        link
          .attr("x1", function (d) { return d.source.x; })
          .attr("y1", function (d) { return d.source.y; })
          .attr("x2", function (d) { return d.target.x; })
          .attr("y2", function (d) { return d.target.y; });

        node
          .attr("cx", function (d) { return d.x; })
          .attr("cy", function (d) { return d.y; });
      }

    });

    function dragstarted(d) {
      if (!d3.event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    function dragged(d) {
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }

    function dragended(d) {
      if (!d3.event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
  </script>

</body>